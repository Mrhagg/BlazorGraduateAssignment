@page "/Register"
@inject AuthenticationStateProvider provider
@inject NavigationManager navManager


<div class="container-fluid">
    <div class="row">
        <div class="register col-xl-4 mx-auto rounded border p-4" style="margin: 60px;">
            <h3 class="text-center mb-3">Register</h3>
            <hr />


            @if (errors.Length > 0)
            {
                <div class="alert alert-danger" role="alert">
                    <ul>
                        @foreach (var error in errors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                </div>
            }

            <div class="row mb-3">
                <label class="email col-md-4 col-form-label">Email</label>
                <div class="col-md-8">
                    <input class="form-control" @bind="email" />
                </div>
            </div>

            <div class="row mb-3">
                <label class="password col-md-4 col-form-label">Password</label>
                <div class="col-md-8">
                    <input class="form-control" type="password" @bind="password" />
                </div>
            </div>

            <div class="row mb-3">
                <label class="confirmPassword col-md-4 col-form-label">Confirm Password</label>
                <div class="col-md-8">
                    <input class="form-control" type="password" @bind="confirmPassword" />
                </div>
            </div>

            <div class="row">
                <div class="offset-md-4 col d-grid">
                    <button class="btn-register" @onclick="RegisterAsync">Register</button>
                </div>
                <div class="col d-grid">
                    <button class="btn-cancel" @onclick="RedirectToHomePage">Cancel</button>
                </div>
            </div>


        </div>
    </div>
</div>




@code {
    public string email = "";
    public string password = "";
    public string confirmPassword = "";
    public string[] errors = [];


    private async Task RegisterAsync()
    {
        if (password != confirmPassword)
        {
            errors = ["Password and Confirm Password do not match!"];
            return;
        }

        var authStateProvider = (CustomAuthStateProvider) provider;
        var registerDto = new RegisterDto
        {
            Email = email,
            Password = password
        };

        var resp = await authStateProvider.RegisterAsync(registerDto);
        if(resp.Succeded)
        {
            navManager.NavigateTo("/");
        }
        else
        {
            errors = resp.Errors;
        }
    }

    private void RedirectToHomePage()
    {
        navManager.NavigateTo("/");
    }
}
