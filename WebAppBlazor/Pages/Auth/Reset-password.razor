@page "/reset-password"
@inject HttpClient HttpClient
@inject NavigationManager Navigation

<div class="login min-vh-100 d-flex justify-content-center align-items-center">
    <div class="card p-4" style="max-width: 500px; width: 100%; background-color: rgba(0, 0, 0, 0.6); border-radius: 15px;">

        <h3 class="text-center">Reset Password</h3>

        @if (isSuccess)
        {
            <div class="alert alert-success text-center">
                Your password has been reset successfully.<br />
                You can now <a href="/Login" class="reset">log in</a>.
            </div>
        }
        else
        {
            <EditForm Model="resetModel" OnValidSubmit="HandleResetPassword">
                <DataAnnotationsValidator />
                <Blazorise.ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">Email</label>
                    <InputText @bind-Value="resetModel.Email" class="form-control" disabled />
                </div>

                <div class="mb-3">
                    <label class="form-label">New Password</label>
                    <InputText @bind-Value="resetModel.NewPassword" type="password" class="form-control" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Confirm New Password</label>
                    <InputText @bind-Value="resetModel.ConfirmPassword" type="password" class="form-control" />
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }

                <button type="submit" class="btn btn-login w-100">Reset Password</button>
            </EditForm>
        }
    </div>
</div>

@code {
    private ResetPasswordModel resetModel = new();
    private string? errorMessage;
    private bool isSuccess = false;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out var email))
        {
            resetModel.Email = email;
        }
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var token))
        {
            resetModel.Token = token;
        }
    }

    private async Task HandleResetPassword()
    {
        errorMessage = null;

        if (resetModel.NewPassword != resetModel.ConfirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        var response = await HttpClient.PostAsJsonAsync("api/Account/reset-password", resetModel);

        if (response.IsSuccessStatusCode)
        {
            isSuccess = true;
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            errorMessage = $"Failed to reset password: {errorContent}";
        }
    }

    


    public class ResetPasswordModel
    {
        public string Email { get; set; } = string.Empty;
        public string Token { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
