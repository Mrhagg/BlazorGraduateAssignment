@page "/factions/{FactionId:int}"
@using WebAppBlazor.Components
@inject HttpClient Http
@inject NavigationManager navManager

<body>
    <main>
        <h3 class="factionName">@factionName</h3>

        @if (races == null)
        {
            <p>Loading...</p>
        }
        else
        {
            <div class="race-grid">
                @foreach (var race in races)
                {
                    <a href="@($"Character-race/{race.Id}")" class="race-card">
                        <img src="@race.ImageUrl" alt="@race.Name" class="race-image" />
                        <h5>@race.Name</h5>
                    </a>
                }


            </div>

            @if (selectedRace != null)
            {
                <RaceDetails Race="selectedRace" />
            }

            <button class="back-button" @onclick="BackToFactions">Cancel</button>
        }



    </main>
</body>


@code {
    [Parameter]
    public int FactionId { get; set; }

    [Parameter]
    public int Id { get; set; }


    private string? factionName;
    private List<CharacterRaceDto>? races;
    private CharacterRaceDto? selectedRace;

    protected override async Task OnParametersSetAsync()
    {
        var faction = await Http.GetFromJsonAsync<FactionDto>($"api/factions/{FactionId}");
        factionName = faction?.Name ?? "Okänd faction";

        races = await Http.GetFromJsonAsync<List<CharacterRaceDto>>($"api/factions/{FactionId}/races");
    }

    private void OnRaceChanged(ChangeEventArgs e)
    {
        var selectedIdString = e.Value?.ToString();
        if (int.TryParse(e.Value?.ToString(), out var selectedId))
        {
            selectedRace = races?.FirstOrDefault(r => r.Id == selectedId);
        }
        else
        {
            selectedRace = null;
        }
    }

    private void SelectRace(CharacterRaceDto race)
    {
        selectedRace = race;
    }

    private void BackToFactions()
    {
        navManager.NavigateTo("/factions");
    }

}

