@page "/Character-race/{Id:int}"
@inject HttpClient Http
@inject NavigationManager navManager
@inject IJSRuntime JS

<body>
    <main>
        @if (race == null)
        {
            <p>Loading race...</p>
        }
        else
        {
            <div class="race-grid">
                <h3 class="title">@race.Name</h3>

                <div class="tabs">
                    <button @onclick='() => OnTabChangedAsync("overview")' class="@GetTabClass("overview")">Overview</button>
                    <button @onclick='() => OnTabChangedAsync("classes")' class="@GetTabClass("classes")">Classes</button>
                </div>

                <div class="race-details">
                    @if (selectedTab == "overview")
                    {
                        <img src="@race.ImageUrl" alt="@race.Name" class="race-page-img" />
                        <p class="desc">@race.Description</p>
                        <h5 class="racial">Racial Abilities:</h5>
                        <h4 class="abilities">@race.RacialAbilities</h4>

                        <button class="back-button" @onclick="GoBack">Cancel</button>
                    }
                    else if (selectedTab == "classes")
                    {
                        @if (wowClasses == null)
                        {
                            <p>Loading classes...</p>
                        }
                        else
                        {
                            <div class="class-grid">
                                @foreach (var wowClass in wowClasses)
                                {
                                    <div class="class-card" @onclick="() => SelectClassAsync(wowClass)">
                                        <img src="@wowClass.ImageUrl" alt="@wowClass.Name" class="class-image" />
                                        <h4>@wowClass.Name</h4>
                                        <p>@wowClass.Description</p>
                                    </div>
                                }
                            </div>

                            @if (selectedClass != null)
                            {
                                <div class="selected-class-details">
                                    <h3>@selectedClass.Name</h3>
                                    <p>@selectedClass.Description</p>

                                    <h4>Specializations</h4>
                                    @if (isLoadingSpecs)
                                    {
                                        <p><em>Loading specs...</em></p>
                                    }
                                    else if (specializations.Any())
                                    {
                                        <ul>
                                            @foreach (var spec in specializations)
                                            {
                                                <li class="clickable-spec @GetRoleClass(spec.RoleName!)" @onclick="() => OpenTalentModalAsync(spec)">
                                                    @GetRoleIcon(spec.RoleName!) @spec.Name - @spec.RoleName
                                                </li>
                                            }
                                        </ul>
                                    }
                                    else
                                    {
                                        <p>Could not find any given specializations..</p>
                                    }
                                </div>
                            }
                        }
                    }
                </div>
            </div>
        }
    </main>
</body>
        

        <Modal @bind-Visible="isTalentModalVisible" Scrollable="true" Class="custom-talent-modal">
           <ModalContent Size="ModalSize.Default">
                <ModalHeader>
                    <div class="modal-header">
                        Talent Tree for @selectedSpecialization?.Name
                    </div>
                    <Button CloseButton Clicked="CloseTalentModal" />
                </ModalHeader>
                <ModalBody>
                    @if (isLoadingTalentTree)
                    {
                        <p>Loading talent tree...</p>
                    }
                    else if (talentTree == null || !talentTree.Any())
                    {
                        <p>No talents found..</p>
                    }
                    else
                    {
                        @foreach (var talent in talentTree)
                        {
                            var isSelected = selectedTalentIds.Contains(talent.Id);
                            <div class="talent-node @(isSelected ? "selected" : "")"
                                @onclick="() => ToggleTalent(talent.Id)">
                                <h5>@talent.Name</h5>
                                <p>@talent.Description</p>

                            </div>
                        }
                    }
                </ModalBody>
           </ModalContent>
           
        </Modal>
    



@code {

    [Parameter] public int Id { get; set; }

    private List<WowClassDto>? wowClasses;

    private CharacterRaceDto? race;

    public List<string> RacialAbilities { get; set; } = new List<string>();

    private List<SpecializationDto> specializations = new();

    private SpecializationDto? selectedSpecialization;

    private List<TalentTreeDto> talentTree = new();

    private bool isTalentModalVisible = false;

    private int? selectedClassId;

    private bool isLoadingSpecs = false;

    private bool isLoadingTalentTree = false;

    private HashSet<int> selectedTalentIds = new();

    private string selectedTab = "overview";

    private WowClassDto? selectedClass;



    protected override async Task OnParametersSetAsync()
    {
        race = await Http.GetFromJsonAsync<CharacterRaceDto>($"api/CharacterRaces/{Id}");
    }

    private async Task OnTabChangedAsync(string tab)
    {
        selectedTab = tab;
        if (tab == "classes" && wowClasses == null)
        {
            wowClasses = await Http.GetFromJsonAsync<List<WowClassDto>>($"api/CharacterRaces/{Id}/classes");
        }
    }

    private async Task LoadTalentTreeForSpec(SpecializationDto spec)
    {
        talentTree = await Http.GetFromJsonAsync<List<TalentTreeDto>>($"api/TalentTree/specialization/{spec.Id}");
    }

    private string GetTabClass(string tab)
    {
        return selectedTab == tab ? "active-tab" : "";
    }

    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }

    private async Task SelectClassAsync(WowClassDto wowClass)
    {
        selectedClass = wowClass;
        isLoadingSpecs = true;
        specializations.Clear();
        StateHasChanged();

        await LoadSpecs(wowClass.Id);

        isLoadingSpecs = false;
        StateHasChanged();


    }

    private async Task LoadSpecs(int classId)
    {
        selectedClassId = classId;
        specializations = await Http.GetFromJsonAsync<List<SpecializationDto>>($"api/WowClass/{classId}/specializations");
    }

    private string GetRoleClass(string role)
    {
        return role.ToLower() switch
        {
            "tank" => "role-tank",
            "damage" => "role-damage",
            "dps" => "role-damage", 
            "healer" => "role-healer",
            _ => ""
        };
    }

    private MarkupString GetRoleIcon(string role)
    {
        var iconHtml = role.ToLower() switch
        {
            "healer" => "<i class='fa-solid fa-cross'></i>",
            "tank" => "<i class='fa-solid fa-shield'></i>",
            "damage" or "dps" => "<i class='fa-solid fa-fire'></i>", 
            _ => ""
        };

        return new MarkupString(iconHtml);
    }

    private async Task OpenTalentModalAsync(SpecializationDto spec)
    {
        selectedSpecialization = spec;
        talentTree = null!; 
        isTalentModalVisible = true;

        isLoadingTalentTree = true;
        talentTree = await Http.GetFromJsonAsync<List<TalentTreeDto>>($"api/TalenTree/specialization/{spec.Id}");
        isLoadingTalentTree = false;

        StateHasChanged();
    }

    private void CloseTalentModal()
    {
        isTalentModalVisible = false;
        selectedSpecialization = null;
        talentTree = null;
        selectedTalentIds.Clear();
    }

    private void ToggleTalent(int id)
    {
        if (!selectedTalentIds.Add(id))
            selectedTalentIds.Remove(id);
    }


}